Week 8.2: Batching

Batching: Productivity improvement technique, group similar together, process all of them very efficiently

Batching options:
- Buffer : collect item util buffer size (list)
- window : collect as flux
- group  : group by property 

Ex: 

Run Batch : run many item in the same time. 

public class B1Buffer {

	public static void main(String[] args) {

		fluxStream()	
				.buffer(5)// group publish into 5 item then publish one time (1 time = 5 iteams) 
				.subscribe(Util.subcriber());
		
		Util.sleep(10);
		
	}
	
	public static Flux<String> fluxStream(){
		return Flux.interval(Duration.ofMillis(100))
				.take(6)
				.map(x -> "event-"+x);
	}

}

----------------------------

Recieved: [event-0, event-1, event-2, event-3, event-4]
Recieved: [event-5]
Completed

--------------------------

.buffer(5)// group publish into 5 item then publish one time (1 time = 5 iteams) 

មានន័យថា វា group បាន 5 item hery vir release ម្តង់


------------------------------------

.buffer(Duration.ofSeconds(2)) មានន័យថា រាល់ ២វិនាទីវាធ្វើការម្តង


----------------------------------

.bufferTimeout(5, Duration.ofSeconds(2)) មានន័យថា រាល់ ២វិនាទីវាធ្វើការម្តង ឬ គ្រប់ ៥ ហើយវា ចេញហើយ

----------------------------------

.buffer(3, 1) : វាយកម្តងបីធាតុ ហើយវាទំលាក់ចោល មួយធាតុដើម 

Recieved: [event-0, event-1, event-2]
Recieved: [event-1, event-2, event-3]​ វាចេញពីលេខ  event-1 សម្រាប់ Group ទីពីរ នឹង
Recieved: [event-2, event-3, event-4]

Ex: .buffer(3, 2) 


Recieved: [event-0, event-1, event-2]
Recieved: [event-2, event-3, event-4]
Recieved: [event-4, event-5, event-6]


Ex: .buffer(3, 3)

Recieved: [event-0, event-1, event-2]
Recieved: [event-3, event-4, event-5]
Recieved: [event-6, event-7, event-8]

Ex: .buffer(3, 5) 

Recieved: [event-0, event-1, event-2]
Recieved: [event-5, event-6, event-7]
Recieved: [event-10, event-11, event-12]


រាងរាល់ 10 iteam យើងយក 1 iteam មកពិនិត្យមើល

Ex: .buffer(1, 10)

Recieved: [event-0]
Recieved: [event-10]
Recieved: [event-20]
Recieved: [event-30]


Assignment :
stream of orderbook: every 300 mili-second ==> we want to see : get revenue of 3 categories
- "Fantasy" , "Essay", "Textbook"

យើងចង់ដឹងថាយើងលក់បានលុយប៉ុន្មានសម្រាប់ បី category នឹង

Result we want :  

Recieved: RevenueReport(dateTime=2024-07-02, map={Fantasy=49.35, Textbook=62.08})
Recieved: RevenueReport(dateTime=2024-07-02, map={Textbook=20.88, Essay=75.5})
Recieved: RevenueReport(dateTime=2024-07-02, map={Essay=96.21000000000001})
Recieved: RevenueReport(dateTime=2024-07-02, map={Textbook=112.52})
Recieved: RevenueReport(dateTime=2024-07-02, map={Textbook=99.63})

Step to think and do : 

1. Create BookOrder Class:

@Data
public class BookOrder {

	private String title;
	private String category;
	private double price;
	
	public BookOrder () {
		Book book = Util.faker().book();
		
		this.title = book.title();
		this.category = book.genre();
		this.price = Double.parseDouble(Util.faker().commerce().price());
		
	}
} 

2. Create RevenuseReport calls (what we want in the report) 

@Data
public class RevenueReport {
	
	private LocalDate dateTime;
	private Map<String, Double> map;
	
	public RevenueReport(Map<String, Double> map) {
		this.map = map;
		this.dateTime = LocalDate.now();
	}

}


3. Main Application to do the report: 

public class B3Assignment {

	private static double nextDouble;

	public static void main(String[] args) {
		
		/*
		for(int i =0 ;i<50;i++) {
			String category = Util.faker().book().genre();
			System.out.println(category);
		}
		*/
		Set<String> categories = Set.of("Fantasy","Essay","Textbook");
		
		flux()
			.filter(book -> categories.contains(book.getCategory()))// filter to our search 
			.buffer(2) // every 2 second we do the report upate 
			.map(books -> calculateRevenue(books)) // convert from list to report revenuse 			
			.subscribe(Util.subcriber());
		
		Util.sleep(10);
	}
	
	private static RevenueReport calculateRevenue(List<BookOrder> books) {
		
		Map<String, Double> map = books.stream()
			.collect(Collectors.groupingBy(
				BookOrder::getCategory,
				Collectors.summingDouble(BookOrder::getPrice)
				));
		
		return new RevenueReport(map);		
	}	
	
	//function generate bookOrder 
	private static Flux<BookOrder> flux(){
		return Flux.interval(Duration.ofMillis(10))				
				.map(x -> new BookOrder());
	}
	
}

- this step we want to see all the bookOrder in 2 second (all the book)
- we want to see only the three type of categories : "Fantasy","Essay","Textbook"
- Set<String> categories = Set.of("Fantasy","Essay","Textbook");
- then filter to that set of String 

----------------- Finish 























































































































